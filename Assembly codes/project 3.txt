CS224
Lab 3.
Section 1.
Ayca Candan Atac
22203501
04.03.2024



----------------------------PRELIMINARY PART 1- INSTRUCTIONCOUNT---------------------------------------------

.text
.globl main


main:   la $a0, main #a0 stores the beginning address
	la $a1, instructionCountStart #a1 stores the end address
	
	lw $s0, 0($a0) #FOR TEST REASONS
	add $s0, $s0, $s0  #FOR TEST REASONS
	
	jal instructionCountStart
	
	la $a0, mainResult
	li $v0, 4
	syscall
	
	la $a0, addResult
	li $v0, 4
	syscall
	
	move $a0, $s2
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	la $a0, oriResult
	li $v0, 4
	syscall
	
	move $a0, $s3
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	la $a0, lwResult
	li $v0, 4
	syscall
	
	move $a0, $s4
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	#move to the subprogram
	la $a0, instructionCountStart
	la $a1, end
	
	jal instructionCountStart
	
	la $a0, endl
	li $v0,4
	syscall 
	
	la $a0, subProgramResult
	li $v0, 4
	syscall
	
	la $a0, addResult
	li $v0, 4
	syscall
	
	move $a0, $s2
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	la $a0, oriResult
	li $v0, 4
	syscall
	
	move $a0, $s3
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	la $a0, lwResult
	li $v0, 4
	syscall
	
	move $a0, $s4
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	j exit
	
instructionCountStart: add $s0, $s0, $0 #FOR TEST REASONS
	add $s4, $s0, $s4 #FOR TEST REASONS
	ori $t0, $t0, 0
	
	move $s0, $a0
	move $s1, $a1
	
	addi $s2, $0, 0 #add = s2
	addi $s3, $0, 0 #ori = s3
	addi $s4, $0, 0 #lw = s4
	
instructionCount:
	bgt $s0, $s1, end
	
	
	lw $s5, 0($s0)
	srl $s7, $s5, 26 #functionını aldık
	beq $s7, 0, rType
	j notR
rType:
	sll $s6, $s5, 26
	srl $s6, $s6, 26 #functionını aldık
	beq $s6, 32, addFound
	j done
	
addFound:
	addi $s2, $s2, 1
	j done
	
notR:
	beq $s7, 35, lwFound
	beq $s7, 13, oriFound
	j done
	
lwFound:
	addi $s4, $s4, 1
	j done

oriFound:
	addi $s3, $s3, 1
	j done
done:

	addi $s0, $s0, 4
	j instructionCount

end:
	jr $ra

exit:
	li $v0, 10
	syscall










.data
subProgramResult: .asciiz "NUMBER RESULTS FOR SUBPROGRAM:\n"
mainResult: .asciiz "NUMBER RESULTS FOR MAIN:\n" 
addResult: .asciiz "The number of add instructions in the code is: "
oriResult: .asciiz "The number of ori instructions in the code is: "
lwResult: .asciiz "The number of lw instructions in the code is: "
endl: .asciiz "\n"














-------------------------------------------------PRELIMINARY 2- RECURSIVE DIVISION-------------------------------------------------
.text
.globl main

main:

	#ask for inputs and receive them
	la $a0, dividendQuestion
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	
	#s0 stores the dividend
	move $s0, $v0
	
	la $a0, divisorQuestion
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	
	#s1 stores the divider
	move $s1, $v0
	
	#s2 stores s0 at first and will vary throughout the implementation
	move $s2, $s0
	
	#s3 will be the quotient
	addi $s3, $0, 0
	jal recursiveDivision
	
	#come back from performDivision
	
	#take the result from v0 and pass it to s0
	move $s0, $v0
	
	#print the output message
	la $a0, result
	li $v0, 4
	syscall

	#print the result
	move $a0, $s0
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall 
	
	la $a0, continueQuestion
	li $v0, 4
	syscall 
	
	#take the input char
	li $v0, 8              
    	la $a0, answerString   
    	li $a1, 2        
    	syscall
	
	#check if the char is 'Y', jump to end if it is not
	lbu $s1, 0($a0)
	bne $s1, 89, end
	addi $s1, $0, 0
	
	la $a0, endl
	li $v0, 4
	syscall 
	
	#jump to main to continue the process
	j main
	
recursiveDivision:

	blt $s2, $s1, done
	sub $s2, $s2, $s1
	addi $s3, $s3, 1
	j recursiveDivision

done:
	#store the answer in s3
	move $v0, $s3
	jr $ra
	
end:
	li $v0, 10
	syscall








.data
dividendQuestion: .asciiz "Please enter the dividend: "
divisorQuestion: .asciiz "Please enter the divisor: "
result: .asciiz "The result is: "
endl: .asciiz "\n"
continueQuestion: .asciiz "Please enter 'Y' to continue: "
answerString: .space 2







---------------------------------------------LAB WORK PART 1 DISPLAY RECURSIVELY---------------------------------------------------
	.text
# CS224, Program to be used in Lab 3
# October 16, 2023

	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	jal 	displayReverseRecursively
	
# Stop. 
	li	$v0, 10
	syscall	
#=========================================================
createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 1 in the data field, node i contains the value i in the data field.
# By inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	addi 	$s4, $s1, 0	
# addi: So that node 1 data value will be 1, node i data value will be i
	sw	$s4, 4($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	addi	$s4, $s1, 0	
# sll: So that node 1 data value will be 1, node i data value will be i
	sw	$s4, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	addi $a0, $a0, 72
	move $s0, $a0	# $s0: points to the last node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 10
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
	
displayReverseRecursively:
		
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp)
	
	#$a0 address
	addi $s0, $a0, 0
	
	lw $s1, 0($s0)
	move $a0, $s1
	addi $s2, $0, 11
	beq $s1, $0, display 
	
	
	jal displayReverseRecursively
	
display:
	beq $s2, 1, exit
	sub $s2, $s2, 1
	la $a0, nodeNumberLabel
	li $v0, 4
	syscall
	
	move $a0, $s2
	li $v0, 1
	syscall
	
	la $a0, addressOfCurrentNodeLabel
	li $v0, 4
	syscall
	
	move $a0, $s0
	li $v0, 34
	syscall
	
	la $a0, addressOfNextNodeLabel
	li $v0, 4
	syscall
	
	move $a0, $s1
	li $v0, 34
	syscall
	
	la $a0, dataValueOfCurrentNode
	li $v0, 4
	syscall
	
	lw $a0,4($s0)
	li $v0, 1
	syscall
	
	la $a0, line
	li $v0, 4
	syscall
	
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	j display
	
exit: 
	li $v0, 10
	syscall
 	
#=========================================================		
	.data
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "









------------------------------------------LAB WORK PART 2 DUPLICATE BY ITERATION-------------------------------------------------------
.text
# CS224, Program to be used in Lab 3
# October 16, 2023

	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	
	move $a1, $a0 #a1 has orig head
	
	la $a0, normalList
	li $v0, 4
	syscall
	
	move $a0, $a1
	jal 	printLinkedList
	
	move $a0, $a1
	
	jal duplicateListIterative
	
	move $a1, $v0
	
	la $a0, duplicateList
	li $v0, 4
	syscall
	
	move $a0, $a1
	
	jal 	printLinkedList
	
# Stop. 
	li	$v0, 10
	syscall	
#=========================================================
createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	addi 	$s4, $s1, 0	
# sll: So that node 1 data value will be 1, node i data value will be i
	sw	$s4, 4($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	addi	$s4, $s1, 0	
# sll: So that node 1 data value will be 1, node i data value will be i
	sw	$s4, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
#=========================================================
	
duplicateListIterative:
	move $s0, $a0
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp)
	
	move $s0, $a0 #s0 keeps the address of the original list
	
	move $s7, $s0 #s6 has the orig list head
	
	addi	$s5,$0, 10	# $s5: no. of nodes to be created.
	
	li	$a0, 8
	li	$v0, 9
	syscall
	
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $s2	# $s3 now points to the list head.
	
	lw $s4, 4($s0)
	sw $s4, 4($s2)
	lw $s0, 0($s0)
	
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
addNodeDup:
    beq $s5, 1, done

    li  $a0, 8
    li  $v0, 9
    syscall

    move $s6, $v0  

 
    lw $s4, 4($s0)
    sw $s4, 4($s6)

    sw $s6, 0($s2)
    move $s2, $s6

    lw $s0, 0($s0)  # Move to the next node in the original list

    addi $s5, $s5, -1

    j addNodeDup									
														
done: 																																			
	lw	$zero, 0($s6)
	move	$v0, $s3
		
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	jr 	$ra																			
																								
																										
																												
																														
																																
																																		
																																				
																																						
																																								
																																										
																																												
																																														
																																																
																																																		
																																																				
																																																						
																																																								
																																																										
																																																												
																																																														
																																																																
																																																																		
																																																																				
																																																																								
	.data
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "
duplicateMessage: .asciiz "Duplicated array display: \n"
normalList: .asciiz "Nodes in the normal list: \n"
duplicateList: .asciiz "\n\nNodes in the duplicated list: \n"









---------------------------------------------------------LAB WORK PART 3 DUPLICATE BY RECURSION-------------------------------------------
.text
# CS224, Program to be used in Lab 3
# October 16, 2023

	li	$a0, 10 	#create a linked list with 10 nodes
	jal	createLinkedList
	
# Linked list is pointed by $v0
	move	$a0, $v0	# Pass the linked list address in $a0
	
	move $a1, $a0 #a1 has orig head
	
	la $a0, normalList
	li $v0, 4
	syscall
	
	move $a0, $a1
	jal 	printLinkedList
	
	move $a0, $a1
	
	jal duplicateListRecursively
	
	move $a1, $v0
	
	la $a0, duplicateList
	li $v0, 4
	syscall
	
	move $a0, $a1
	
	jal 	printLinkedList
	
# Stop. 
	li	$v0, 10
	syscall	
#=========================================================
createLinkedList:
# $a0: No. of nodes to be created ($a0 >= 1)
# $v0: returns list head
# Node 1 contains 4 in the data field, node i contains the value 4*i in the data field.
# By inserting a data value like this
# when we print linked list we can differentiate the node content from the node sequence no (1, 2, ...).
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram
	
	move	$s0, $a0	# $s0: no. of nodes to be created.
	li	$s1, 1		# $s1: Node counter
# Create the first node: header.
# Each node is 8 bytes: link field then data field.
	li	$a0, 8
	li	$v0, 9
	syscall
# OK now we have the list head. Save list head pointer 
	move	$s2, $v0	# $s2 points to the first and last node of the linked list.
	move	$s3, $v0	# $s3 now points to the list head.
	addi 	$s4, $s1, 0	
# sll: So that node 1 data value will be 1, node i data value will be i
	sw	$s4, 4($s2)	# Store the data value.
	
addNode:
# Are we done?
# No. of nodes created compared with the number of nodes to be created.
	beq	$s1, $s0, allDone
	addi	$s1, $s1, 1	# Increment node counter.
	li	$a0, 8 		# Remember: Node size is 8 bytes.
	li	$v0, 9
	syscall
# Connect the this node to the lst node pointed by $s2.
	sw	$v0, 0($s2)
# Now make $s2 pointing to the newly created node.
	move	$s2, $v0	# $s2 now points to the new node.
	addi	$s4, $s1, 0	
# sll: So that node 1 data value will be 1, node i data value will be i
	sw	$s4, 4($s2)	# Store the data value.
	j	addNode
allDone:
# Make sure that the link field of the last node cotains 0.
# The last node is pointed by $s2.
	sw	$zero, 0($s2)
	move	$v0, $s3	# Now $v0 points to the list head ($s3).
	
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
#=========================================================
printLinkedList:
# Print linked list nodes in the following format
# --------------------------------------
# Node No: xxxx (dec)
# Address of Current Node: xxxx (hex)
# Address of Next Node: xxxx (hex)
# Data Value of Current Node: xxx (dec)
# --------------------------------------

# Save $s registers used
	addi	$sp, $sp, -20
	sw	$s0, 16($sp)
	sw	$s1, 12($sp)
	sw	$s2, 8($sp)
	sw	$s3, 4($sp)
	sw	$ra, 0($sp) 	# Save $ra just in case we may want to call a subprogram

# $a0: points to the linked list.
# $s0: Address of current
# s1: Address of next
# $2: Data of current
# $s3: Node counter: 1, 2, ...
	move $s0, $a0	# $s0: points to the current node.
	li   $s3, 0
printNextNode:
	beq	$s0, $zero, printedAll
				# $s0: Address of current node
	lw	$s1, 0($s0)	# $s1: Address of  next node
	
	lw	$s2, 4($s0)	# $s2: Data of current node
	addi	$s3, $s3, 1
# $s0: address of current node: print in hex.
# $s1: address of next node: print in hex.
# $s2: data field value of current node: print in decimal.
	la	$a0, line
	li	$v0, 4
	syscall		# Print line seperator
	
	la	$a0, nodeNumberLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s3	# $s3: Node number (position) of current node
	li	$v0, 1
	syscall
	
	la	$a0, addressOfCurrentNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s0	# $s0: Address of current node
	li	$v0, 34
	syscall

	la	$a0, addressOfNextNodeLabel
	li	$v0, 4
	syscall
	
	move	$a0, $s1	# $s0: Address of next node
	li	$v0, 34
	syscall	
	
	la	$a0, dataValueOfCurrentNode
	li	$v0, 4
	syscall
		
	move	$a0, $s2	# $s2: Data of current node
	li	$v0, 1		
	syscall	

# Now consider next node.
	move	$s0, $s1	# Consider next node.
	j	printNextNode
printedAll:
# Restore the register values
	lw	$ra, 0($sp)
	lw	$s3, 4($sp)
	lw	$s2, 8($sp)
	lw	$s1, 12($sp)
	lw	$s0, 16($sp)
	addi	$sp, $sp, 20
	jr	$ra
#=========================================================
	
duplicateListRecursively:
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp)
	
	# s0-> head of original
	move $s0, $a0
	
	li	$v0, 9	
	li	$a0, 8
	syscall
	
	# s1->new node head
	move	$s1, $v0
	
	# s2->new next node adress
	lw $s2, 0($s0)
	# s3->new current node value
	lw $s3, 4($s0)
	
	#new next node
	sw $s2, 0($s1)
	
	#save new data 
	sw $s3, 4($s1)
	
	#head address of the newly created node goes in as argument
	move $a0, $s1
	jal recursiveNodeAdd
	
	# put the head address in v0
	move $v0, $s1
	
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	
	jr	$ra
	
recursiveNodeAdd:
	
	addi	$sp, $sp, -24
	sw	$s0, 20($sp)
	sw	$s1, 16($sp)
	sw	$s2, 12($sp)
	sw	$s3, 8($sp)
	sw	$s4, 4($sp)
	sw	$ra, 0($sp)
	
	move $s0, $a0
	
	li	$v0, 9			# new node allocation syscall
	li	$a0, 8
	syscall
	
	move $s1, $v0
	
	
	lw $s2, 0($s0)
	lw $s4, 0($s2)
	sw $s1, 0($s0)
	
	lw $s3, 4($s2)
	sw $s3, 4($s1)
	

	
	sw $s4, 0($s1)
	
	bne $s4, $zero, continue

	move $v0, $s1   # Set $v0 to the address of the new list's node
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	jr $ra
	
continue:																																				
																								
	move $a0, $s1   # Set $a0 to the address of the new node for the next recursive call
	jal recursiveNodeAdd
	
	lw	$ra, 0($sp)
	lw	$s4, 4($sp)
	lw	$s3, 8($sp)
	lw	$s2, 12($sp)
	lw	$s1, 16($sp)
	lw	$s0, 20($sp)
	addi	$sp, $sp, 24
	jr $ra																																											
	.data
line:	
	.asciiz "\n --------------------------------------"

nodeNumberLabel:
	.asciiz	"\n Node No.: "
	
addressOfCurrentNodeLabel:
	.asciiz	"\n Address of Current Node: "
	
addressOfNextNodeLabel:
	.asciiz	"\n Address of Next Node: "
	
dataValueOfCurrentNode:
	.asciiz	"\n Data Value of Current Node: "

normalList: .asciiz "Nodes in the normal list: \n"
duplicateList: .asciiz "\n\nNodes in the duplicated list: \n"																												
		